{"version":3,"file":"component---src-pages-index-tsx-24373872d55c7bfa462f.js","mappings":"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","sources":["webpack://portfolio/../src/image-utils.ts","webpack://portfolio/../src/components/hooks.ts","webpack://portfolio/../src/components/layout-wrapper.tsx","webpack://portfolio/../src/components/picture.tsx","webpack://portfolio/../src/components/placeholder.tsx","webpack://portfolio/../src/components/main-image.tsx","webpack://portfolio/../src/components/gatsby-image.server.tsx","webpack://portfolio/../src/components/gatsby-image.browser.tsx","webpack://portfolio/../src/components/static-image.server.tsx","webpack://portfolio/../src/components/static-image.tsx","webpack://portfolio/./src/components/organisms/heroBlock/textBlock.tsx","webpack://portfolio/./src/components/organisms/heroBlock/heroBlockComponent.tsx","webpack://portfolio/./src/utils/toIcon.tsx","webpack://portfolio/./src/components/molecules/featureArticle/featureArticle.tsx","webpack://portfolio/./src/components/molecules/section/section.tsx","webpack://portfolio/./src/components/molecules/subSection/subSection.tsx","webpack://portfolio/./src/components/templates/experienceSection/experienceSection.tsx","webpack://portfolio/./src/components/templates/skillSection/skillSection.tsx","webpack://portfolio/./src/pages/index.tsx","webpack://portfolio/./node_modules/.pnpm/camelcase@6.3.0/node_modules/camelcase/index.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import { type FC, Fragment } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { H1, H2, LineBreak, Text } from \"../../atoms\";\n\ninterface IHeroTextBlockProps {\n  className?: string;\n  title: string;\n  subtitle: string;\n  heroText: string | string[];\n}\n\nconst TextBlock: FC<IHeroTextBlockProps> = ({\n  className,\n  title,\n  subtitle,\n  heroText,\n}) => {\n  const text = Array.isArray(heroText) ? (\n    heroText.map((text, index) => (\n      <Fragment key={`heroText-${text}`}>\n        <Text>{text}</Text>\n        {index < heroText.length - 1 && <LineBreak />}\n      </Fragment>\n    ))\n  ) : (\n    <Text>{heroText}</Text>\n  );\n\n  return (\n    <div className={twMerge(\"flex flex-col items-start\", className)}>\n      <H1>{title}</H1>\n      <H2 className=\"mt-4 pb-6\">{subtitle}</H2>\n      {text}\n    </div>\n  );\n};\n\nexport default TextBlock;\n","import type { FC, ReactNode } from \"react\";\nimport type { Basics } from \"../../../types/resume\";\nimport TextBlockComponent from \"./textBlock\";\n\nexport interface IHeroTextBlockProps {\n  basic: Basics;\n  profileImage: ReactNode;\n}\n\nconst HeroBlock: FC<IHeroTextBlockProps> = ({ basic, profileImage }) => {\n  return (\n    <section className=\"flex max-md:flex-col-reverse items-center gap-8 md:w-2/3\">\n      <TextBlockComponent\n        className=\"md:w-2/3\"\n        title={basic.name}\n        subtitle={basic.label}\n        heroText={basic.summary.split(\"\\n\")}\n      />\n      <div className=\"md:w-1/3\">{profileImage}</div>\n    </section>\n  );\n};\n\nexport default HeroBlock;\n","import {\n  ActivityLogIcon,\n  EnvelopeClosedIcon,\n  HandIcon,\n  LapTimerIcon,\n  LayersIcon,\n  LightningBoltIcon,\n  LinkBreak2Icon,\n  MixIcon,\n  Pencil2Icon,\n  PersonIcon,\n  ReaderIcon,\n  RulerSquareIcon,\n  Share1Icon,\n} from \"@radix-ui/react-icons\";\nimport type { ReactNode } from \"react\";\nimport {\n  AngularJsIcon,\n  AWSIcon,\n  BashIcon,\n  BitbucketIcon,\n  CIcon,\n  CPlusPlusIcon,\n  CSharpIcon,\n  DJangoIcon,\n  DockerIcon,\n  DynamoDBIcon,\n  GithubIcon,\n  GitIcon,\n  IonicIcon,\n  JavaIcon,\n  JenkinsIcon,\n  LagomIcon,\n  LinuxIcon,\n  MongoDBIcon,\n  MySQLIcon,\n  NestJSIcon,\n  PostgreSQLIcon,\n  PythonIcon,\n  ReactIcon,\n  RedisIcon,\n  SpringIcon,\n  StrapiIcon,\n  TerraformIcon,\n  TerragruntIcon,\n  TypescriptIcon,\n} from \"../components/atoms\";\n\nexport function toIcon(name: string): ReactNode {\n  switch (name.toLowerCase()) {\n    //#region Programming Languages\n    case \"java\":\n      return <JavaIcon />;\n    case \"python\":\n      return <PythonIcon />;\n    case \"typescript\":\n      return <TypescriptIcon />;\n    case \"bash\":\n      return <BashIcon />;\n    case \"c#\":\n      return <CSharpIcon />;\n    case \"c\":\n      return <CIcon />;\n    case \"c++\":\n      return <CPlusPlusIcon />;\n    case \"c/c++\":\n      return (\n        <>\n          <CIcon width={10} height={10} />\n          <CPlusPlusIcon width={10} height={10} />\n        </>\n      );\n    //#endregion\n    //#region Databases\n    case \"mysql\":\n      return <MySQLIcon />;\n    case \"redis\":\n      return <RedisIcon />;\n    case \"dynamodb\":\n      return <DynamoDBIcon />;\n    case \"postgresql\":\n      return <PostgreSQLIcon />;\n    case \"mongodb\":\n      return <MongoDBIcon />;\n    //#endregion\n    //#region Frameworks/Platforms/Libraries\n    case \"angularjs\":\n      return <AngularJsIcon />;\n    case \"django\":\n      return <DJangoIcon />;\n    case \"spring\":\n      return <SpringIcon />;\n    case \"nestjs\":\n      return <NestJSIcon />;\n    case \"react\":\n      return <ReactIcon />;\n    case \"lagom\":\n      return <LagomIcon />;\n    case \"ionic\":\n      return <IonicIcon />;\n    case \"strapi\":\n      return <StrapiIcon />;\n    //#endregion\n    //#region Devops\n    case \"bitbucket pipelines\":\n      return <BitbucketIcon />;\n    case \"github actions\":\n      return <GithubIcon />;\n    case \"aws\":\n      return <AWSIcon />;\n    case \"jenkins\":\n      return <JenkinsIcon />;\n    case \"terraform\":\n      return <TerraformIcon />;\n    case \"terragrunt\":\n      return <TerragruntIcon />;\n    case \"docker\":\n      return <DockerIcon />;\n    //#endregion\n    //#region Other\n    case \"git\":\n      return <GitIcon />;\n    case \"system design\":\n      return <Pencil2Icon className=\"mt-0.5\" />;\n    case \"agile methodologies\":\n      return <LightningBoltIcon className=\"mt-0.5\" />;\n    case \"stakeholder communication\":\n      return <EnvelopeClosedIcon className=\"mt-0.5\" />;\n    case \"linux\":\n      return <LinuxIcon />;\n    //#endregion\n    //#region experience\n    case \"ruler\":\n      return <RulerSquareIcon className=\"mt-0.5\" />;\n    case \"reader\":\n      return <ReaderIcon className=\"mt-0.5\" />;\n    case \"mix\":\n      return <MixIcon className=\"mt-0.5\" />;\n    case \"person\":\n      return <PersonIcon className=\"mt-0.5\" />;\n    case \"share\":\n      return <Share1Icon className=\"mt-0.5\" />;\n    case \"timer\":\n      return <LapTimerIcon className=\"mt-0.5\" />;\n    case \"layers\":\n      return <LayersIcon className=\"mt-0.5\" />;\n    case \"activity\":\n      return <ActivityLogIcon className=\"mt-0.5\" />;\n    case \"break\":\n      return <LinkBreak2Icon className=\"mt-0.5\" />;\n    case \"hand\":\n      return <HandIcon className=\"mt-0.5\" />;\n    //#endregion\n    default:\n      throw new Error(`No Icon for ${name}`);\n  }\n}\n","import type { FC, PropsWithChildren, ReactNode } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport H4 from \"../../atoms/header/h4\";\n\ninterface IFeatureArticleProps extends PropsWithChildren {\n  icon: ReactNode;\n  title?: ReactNode;\n  className?: string;\n}\n\nconst FeatureArticle: FC<IFeatureArticleProps> = ({\n  icon,\n  title,\n  children,\n  className,\n}) => {\n  return (\n    <article className={twMerge(\"flex flex-row gap-2\", className)}>\n      {icon && <div className=\"py-1\">{icon}</div>}\n      <div className=\"flex flex-col\">\n        {title && <H4>{title}</H4>}\n        <div>{children}</div>\n      </div>\n    </article>\n  );\n};\n\nexport default FeatureArticle;\n","import type { FC, PropsWithChildren, ReactNode } from \"react\";\nimport { H2 } from \"../../atoms\";\n\ninterface ISkillSectionProps extends PropsWithChildren {\n  title: ReactNode;\n}\n\nconst Section: FC<ISkillSectionProps> = ({ title, children }) => {\n  return (\n    <section className=\"md:w-2/3 max-sm:w-full\">\n      <H2>{title}</H2>\n      <div className=\"flex flex-col gap-8 pt-3\">{children}</div>\n    </section>\n  );\n};\n\nexport default Section;\n","import type { FC, PropsWithChildren, ReactNode } from \"react\";\nimport { H3 } from \"../../atoms\";\n\ninterface ISkillSectionProps extends PropsWithChildren {\n  title: ReactNode;\n  subtitle?: ReactNode;\n}\n\nconst SubSection: FC<ISkillSectionProps> = ({ title, subtitle, children }) => {\n  return (\n    <section className=\"flex flex-col gap-4 w-full\">\n      <div>\n        <H3 className=\"font-bold break-words\">{title}</H3>\n        {subtitle && <H3 className=\"font-semibold\">{subtitle}</H3>}\n      </div>\n      <div className=\"flex flex-row gap-8 grow justify-evenly w-full flex-wrap\">\n        {children}\n      </div>\n    </section>\n  );\n};\n\nexport default SubSection;\n","import type { FC } from \"react\";\nimport type { Work } from \"../../../types/resume\";\nimport { toIcon } from \"../../../utils\";\nimport { FeatureArticle, Section, SubSection } from \"../../molecules\";\n\ninterface IExperienceSectionProps {\n  works: Work[];\n}\n\ninterface IExperienceSubtitleProps {\n  name: string;\n  startDate: string;\n  endDate: string;\n}\n\nconst DATE_RENDERER = new Intl.DateTimeFormat(\"en-GB\", {\n  year: \"numeric\",\n  month: \"long\",\n});\n\nconst ExperienceSubtitle: FC<IExperienceSubtitleProps> = ({\n  name,\n  startDate,\n  endDate,\n}) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  return (\n    <>\n      {name} <span className=\"font-extrabold\">|</span>{\" \"}\n      <span className=\"italic font-extralight\">\n        <time dateTime={startDate}>{DATE_RENDERER.format(start)}</time> -{\" \"}\n        <time dateTime={endDate}>{DATE_RENDERER.format(end)}</time>\n      </span>\n    </>\n  );\n};\n\nconst ExperienceSection: FC<IExperienceSectionProps> = ({ works }) => {\n  return (\n    <Section title=\"Experience\">\n      {works.map((workExperience) => {\n        return (\n          <SubSection\n            key={`${workExperience.name}-${workExperience.startDate}-${workExperience.endDate}`}\n            title={workExperience.position}\n            subtitle={\n              <ExperienceSubtitle\n                name={workExperience.name}\n                startDate={workExperience.startDate}\n                endDate={workExperience.endDate}\n              />\n            }\n          >\n            {workExperience.duties?.map((duty) => (\n              <FeatureArticle\n                key={duty.description}\n                icon={toIcon(duty.icon)}\n                className=\"md:w-1/3\"\n              >\n                {duty.description}\n              </FeatureArticle>\n            ))}\n          </SubSection>\n        );\n      })}\n    </Section>\n  );\n};\n\nexport default ExperienceSection;\n","import { type FC, useMemo } from \"react\";\nimport type { Skill } from \"../../../types/resume\";\nimport { toIcon } from \"../../../utils\";\nimport { FeatureArticle, Section, SubSection } from \"../../molecules\";\n\ninterface ISkillSectionProps {\n  skills: Skill[];\n}\n\nconst skillSection: FC<ISkillSectionProps> = ({ skills }) => {\n  const subSections = useMemo(\n    () =>\n      skills.reduce(\n        (acc, skill) => {\n          const groupKey = String(skill.category);\n\n          if (!acc[groupKey]) {\n            acc[groupKey] = [];\n          }\n\n          acc[groupKey].push(skill);\n\n          // Return the accumulator for the next iteration\n          return acc;\n        },\n        {} as Record<string, Skill[]>,\n      ),\n    [skills],\n  );\n\n  return (\n    <Section title=\"Skills\">\n      {Object.keys(subSections).map((category) => {\n        return (\n          <SubSection key={category} title={category}>\n            {subSections[category].map((skill) => (\n              <FeatureArticle\n                key={skill.name}\n                title={skill.name}\n                icon={toIcon(skill.name)}\n              />\n            ))}\n          </SubSection>\n        );\n      })}\n    </Section>\n  );\n};\n\nexport default skillSection;\n","import type { HeadFC, PageProps } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport type { FC } from \"react\";\nimport { MainLayout } from \"../components/layouts/mainLayout\";\nimport { HeroBlock } from \"../components/organisms\";\nimport { ExperienceSection, SkillSection } from \"../components/templates\";\nimport resume from \"../data/resume.json\";\nimport type { ResumeSchema } from \"../types/resume\";\n\nconst TypedResume = resume as ResumeSchema;\n\nconst IndexPage: FC<PageProps> = () => {\n  return (\n    <MainLayout>\n      <HeroBlock\n        basic={TypedResume.basics}\n        profileImage={\n          <StaticImage\n            src={\"../images/marcus-gilmore-lim.jpg\"}\n            alt=\"A picture of Marcus Gilmore\"\n            imgClassName=\"w-full h-auto object-cover rounded-full\"\n          />\n        }\n      />\n      <SkillSection skills={TypedResume.skills} />\n      <ExperienceSection works={TypedResume.work} />\n    </MainLayout>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => (\n  <>\n    <html lang=\"en\" />\n    <title>Home Page</title>\n    <meta name=\"description\" content=\"The portfolio of Marcus Gilmore-Lim, a Senior Software Engineer with 10 years of experience in building robust, scalable systems. A programming polyglot specializing in Java, Python, C#, cloud architecture, and DevOps.\" />\n  </>\n);\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"names":["W","hasNativeLazyLoadSupport","HTMLImageElement","prototype","z","e","t","a","i","s","width","height","className","style","P","h","loading","shouldLoad","opacity","A","r","n","o","l","backgroundColor","position","top","left","bottom","right","objectFit","objectPosition","d","transition","H","F","_ref5","layout","paddingTop","maxWidth","display","alt","role","src","G","children","u","V","B","U","srcSet","decoding","Y","fallback","sources","sizes","length","map","_ref6","media","type","key","X","propTypes","isRequired","displayName","J","Z","Error","K","Q","ee","te","replace","ae","_len","arguments","Array","_key","c","apply","concat","ie","image","se","re","ne","Set","oe","le","de","as","class","g","onStartLoad","p","onLoad","m","onError","f","w","y","b","v","E","k","S","M","N","$","JSON","stringify","images","I","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ce","he","ue","__imageData","__error","console","warn","ge","imgClassName","imgStyle","placeholder","pe","_len2","_key2","me","fe","we","_ref","title","subtitle","heroText","text","isArray","index","_jsxs","Fragment","_jsx","Text","LineBreak","twMerge","H1","H2","basic","profileImage","TextBlockComponent","name","label","summary","split","toIcon","toLowerCase","JavaIcon","PythonIcon","TypescriptIcon","BashIcon","CSharpIcon","CIcon","CPlusPlusIcon","_Fragment","MySQLIcon","RedisIcon","DynamoDBIcon","PostgreSQLIcon","MongoDBIcon","AngularJsIcon","DJangoIcon","SpringIcon","NestJSIcon","ReactIcon","LagomIcon","IonicIcon","StrapiIcon","BitbucketIcon","GithubIcon","AWSIcon","JenkinsIcon","TerraformIcon","TerragruntIcon","DockerIcon","GitIcon","Pencil2Icon","LightningBoltIcon","EnvelopeClosedIcon","LinuxIcon","RulerSquareIcon","ReaderIcon","MixIcon","PersonIcon","Share1Icon","LapTimerIcon","LayersIcon","ActivityLogIcon","LinkBreak2Icon","HandIcon","icon","H4","H3","DATE_RENDERER","Intl","DateTimeFormat","year","month","ExperienceSubtitle","startDate","endDate","start","Date","end","dateTime","format","_ref2","works","Section","workExperience","_workExperience$dutie","SubSection","duties","duty","FeatureArticle","description","skills","subSections","useMemo","reduce","acc","skill","groupKey","String","category","push","Object","keys","TypedResume","IndexPage","MainLayout","HeroBlock","basics","StaticImage","require","SkillSection","ExperienceSection","work","Head","lang","content","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","TypeError","pascalCase","preserveConsecutiveUppercase","x","trim","filter","join","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","lastIndex","m1","charAt","_","identifier","postProcess","module","exports"],"sourceRoot":""}